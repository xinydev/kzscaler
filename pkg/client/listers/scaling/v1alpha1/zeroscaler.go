/*
Copyright 2022 XinYang

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kzscaler/kzscaler/pkg/apis/scaling/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ZeroScalerLister helps list ZeroScalers.
// All objects returned here must be treated as read-only.
type ZeroScalerLister interface {
	// List lists all ZeroScalers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ZeroScaler, err error)
	// ZeroScalers returns an object that can list and get ZeroScalers.
	ZeroScalers(namespace string) ZeroScalerNamespaceLister
	ZeroScalerListerExpansion
}

// zeroScalerLister implements the ZeroScalerLister interface.
type zeroScalerLister struct {
	indexer cache.Indexer
}

// NewZeroScalerLister returns a new ZeroScalerLister.
func NewZeroScalerLister(indexer cache.Indexer) ZeroScalerLister {
	return &zeroScalerLister{indexer: indexer}
}

// List lists all ZeroScalers in the indexer.
func (s *zeroScalerLister) List(selector labels.Selector) (ret []*v1alpha1.ZeroScaler, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ZeroScaler))
	})
	return ret, err
}

// ZeroScalers returns an object that can list and get ZeroScalers.
func (s *zeroScalerLister) ZeroScalers(namespace string) ZeroScalerNamespaceLister {
	return zeroScalerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ZeroScalerNamespaceLister helps list and get ZeroScalers.
// All objects returned here must be treated as read-only.
type ZeroScalerNamespaceLister interface {
	// List lists all ZeroScalers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ZeroScaler, err error)
	// Get retrieves the ZeroScaler from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ZeroScaler, error)
	ZeroScalerNamespaceListerExpansion
}

// zeroScalerNamespaceLister implements the ZeroScalerNamespaceLister
// interface.
type zeroScalerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ZeroScalers in the indexer for a given namespace.
func (s zeroScalerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ZeroScaler, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ZeroScaler))
	})
	return ret, err
}

// Get retrieves the ZeroScaler from the indexer for a given namespace and name.
func (s zeroScalerNamespaceLister) Get(name string) (*v1alpha1.ZeroScaler, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("zeroscaler"), name)
	}
	return obj.(*v1alpha1.ZeroScaler), nil
}
